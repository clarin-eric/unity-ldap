[[contents-management]]
== Contents management

The Web Admin UI allows to manage the schema and contents of the server.
The initial admin user and its password is defined in the configuration file. 
The actual address is defined there as well, if unchanged it is https://localhost:2443/admin/admin.
After the first login it is required to change the initial password.  
 

The most important features of the Web Admin UI are:

* Management of attribute types, attribute classes,
  credential types and credential requirements (_Schema management tab_).
* Possibility to manage groups, their attribute classes and attribute statements (_Contents management tab_).
* Control over entities and identities and their group membership (_Contents management tab_).
* Full attribute control (_Contents management tab_).
* Management of registration forms, possibility to fill them instantly from the Web Admin UI and to manage
the received requests (_Registrations management tab_).
* Possibility to create and load database dumps and to browse and trigger reconfiguration of 
endpoints, authenticators and translation profiles (_Server management tab_).

We hope that the UI is easy to use, the base information is provided on the following screenshot and in 
subsequent sections. In case of troubles please let us know through the mailing list, we will provide more details.

image::./figures/contentsMan-comments.png[alt="Unity Web Admin UI",align="center",scaledwidth="50%"]

=== Identities and entities

Unity represents principals as _entities_. Entity is a logical element symbolizing, the principal. Each entity
must have at least one concrete representation which is called _identity_. 

Identities in Unity have its type, which defines the syntax, comparison rules etc. of the value. 

Regular identities can be created manually by administrators, imported from external IdPs with a help of 
input translation profile or added in effect of registration request acceptance. There is also a special category
of identities: dynamic (or automatic) identities. Those identities are special in this sense that their values
are assigned by Unity itself - administrator is able to only see their values and optionally can remove the values.

The following table describes all available identity types:

[cols="m,n,n" options="header"]
|=== 
|UNITY identity type	| Category	| Description  
|userName				| regular	| User name, compared with simple string equality. This type of identity can be used for all password-alike authentications in Unity. 
|identifier				| regular	| Generic identifier, compared with string equality. It is useful to represent remotely assigned user identifiers and to match against them during subsequent authentications. It is not possible to directly login with this identity type. 
|x500Name				| regular	| X.500 name or a Distinguished Name (DN). Used in case of TLS/SSL authentication. The equality is tested on canonical form of DN.
|email					| regular	| Email address identity, compared with simple string equality. This type of identity can be used for all password-alike authentications in Unity. The value of this identity is subject of confirmation process.
|persistent				| automatic	| An automatically assigned anonymous identifier. Should be constant for each entity for its lifetime (and is unless manually removed).
|targetedPersistent		| automatic	| An automatically assigned anonymous identifier. It is different from the persistent type as for each of Unity clients (targets) a different identifier is maintained. 
|transient				| automatic	| An automatically assigned anonymous identifier. It is very similar to targetedPersistent, the only difference is that the identifier is regenerated for each login session. 
|===


[[attributes]]
=== Attributes and attribute statements

Regular Unity attributes are assigned in groups and an attribute assigned in a group is valid and visible only 
in the group where is was defined. Regular attributes are assigned either manually (in Admin UI or via REST interface)
or by translation profile for users logging from remote IdP. 

In many cases it is not enough: some attributes should be visible in multiple groups, some attributes should be
added just for everybody, other attributes should be added to all users fulfilling some criteria. For all those 
cases Unity offers a feature called 'attribute statements'.

Attribute statements are created per group. Each group can contain multiple statements, which are applied in order.
Each statement can assign a single attribute to a group member. Each statement is evaluated per each group member
what means it can provide a different values for different group members. The assigned attribute is always fixed, 
however the actual values and to whom/when the attribute is assigned is decided at runtime.

Each attribute statement contains a _condition_, an MVEL expression, which must evaluate to a boolean value. 
Only if condition evaluates to true the attribute of the statement is applied. 

Statement's attribute can be assigned in two ways:

* as a _fixed_ attribute. In this mode the attribute is defined together with values in the statement. 
The advantage of this mode is that one can define the value with the type-specific attribute editor.
* as a _dynamic_ attribute. In this mode attribute values are determined at runtime. It is the most useful to copy
values from a different group, to modify some values etc.

Each statement contains a conflict resolution rule. It defines what to do if two statements create 
the same attribute. Note that if a statement creates a dynamic attribute which is already defined as a regular one,
the dynamic one is always skipped. 

Condition and (in case of dynamic attribute) attribute value expressions are given with MVEL language. 
See {mveldoc} for a generic introduction. Below we present a number of examples of the common cases.

Finally a statement can have an 'extra' attribute group defined. If such group is set, then the attributes
from this extra group are available in the MVEL context of conditions and dynamic value expressions. 
Note that dynamic attributes in an extra group are available too, what offers a great power. Unity, however
uses advanced algorithms to prevent dependency circles. It is also only possible to to use a subgroup or
a parent group as an extra group. 

Always check log files after changing attribute statements, to verify if there are no errors. It is
also good to enable DEBUG logging on +unity.server.AttributeStatementProcessor+ when behavior is not as expected.

==== Reference
MVEL context reference:

. +attr+ Map indexed with regular attribute names of the current group. Value of each entry is a 
single value of the attribute. If the attribute is multi-valued then the first value is returned. 
If the attribute has no value then empty string is returned. 
. +attrs+ Map indexed with regular attribute names of the current group. Value of each entry is a 
list of the attribute values.
. +eattr+ As +attr+ but with attributes of the extra group (only available if extra group is defined). 
. +eattrs+ As +attrs+ but with attributes of the extra group (only available if extra group is defined). 
. +entityId+ The identifier (numeric) of the entity
. +groupName+ Name of the group in which the statement is defined/evaluated.
. +groups+ List of all groups the entity is member of. 
. +idsByType+ Map indexed with identity types. Each entry is a list with all identities of the entity.  


==== Examples

Condition:

----
true
----

can be used to assign an attribute to every group member.

Condition:

----
groups contains '/staff' 
----

will assign statement's attribute to all members of group '/staff'.

The following statement of group '/staff/admins':

----
extra group: /staff
condition: eattrs contains 'phoneNumber'
attribute name: phoneNumber
attribute values: eattrs['phoneNumber']
----

copies the attribute 'phoneNumber' from the parent group.

The following statement:

----
condition: idsByType contains 'userName'
attribute name: username
attribute values: idsByType['userName']
----

creates an attribute 'username' with all identities of 'userName' type.



=== Authorization

Unity offers a simple but quite powerful authorization control of its own access. It is controlled by a designated
attribute: +sys:AuthorizationRole+. The attribute is of enumeration type, and the type can not be changed.

By assigning this attribute to entities, those entities are granted some roles and therefore are authorized to perform 
certain operations in Unity. The detailed information on what is allowed for each role holder is provided 
in attribute type description (see Schema Management->Attribute Types). The two most important roles are:

 . +System manager+ who is authorized to perform all actions and
 . +Regular user+ who can perform all the typical operations reserved for users, i.e. read information about itself.

[NOTE]
===========
It is possible to create an entity without assigning any authorization role. Such entity will be present in the system,
but won't be able to perform any operation besides authenticating itself. It won't be even allowed to read its own attributes.
===========

[NOTE]
===========
A good approach is to define an attribute statement assigning a default authorization role (e.g. +Regular User+
or +Anonymous User+) to all members of the '/' group.
===========

The +sys:AuthorizationRole+ is typically assigned in the root ('/') group. However, Unity also supports
authorization on the group level: all Unity operations which operate on a particular group (e.g. read attributes in 
a group, add a member to a group, read group members, create a subgroup, etc) are using the +sys:AuthorizationRole+
attribute which is defined for the user performing the operation in the group in question or in the closest parent 
where it is defined. Example:

====
User _Joe_ is a member of +/Faculty/Staff+ group (therefore it is also a member of +/Faculty+) and no other groups. 
He has the +sys:AuthorizationRole=System Manager+ attribute defined in the +/Faculty/Staff+ group. What's more he has 
+sys:AuthorizationRole=Anonymous User+ defined in '/' group and  +sys:AuthorizationRole=Regular User+ attribute
in the +/Faculty+ group.

_Joe_ tries to add an attribute to an entity representing _Ann_, in the group +/Faculty/Students+. As he is not a member
of this group he has no authorization role defined there. The next group to check is +/Faculty+, 
where he has the authorization role defined (+Regular User+). The role doesn't allow for managing attributes 
so the operation will fail. However _Joe_ can modify attributes of any entity in the  +/Faculty/Staff+ 
group as he has +System Manager+ role there.
====  
 

=== E-mail confirmations

Unity provides a powerful support for verifications of e-mail addresses. Both e-mail identities and e-mail attributes
can be verified. In case of e-mail attribute each value is confirmed separately.  

As this functionality touches many different areas of Unity functionality we group all
the related information here.

==== Confirmations setup

To enable confirmations the following basic elements needs to be configured:

. The E-mail notification channel must be configured.
. There must be a message template (or templates) suitable for use with confirmation facility. See <<notifications>>.
. To confirm attributes at least one attribute type must be defined which will use the +verifiableEmail+ syntax. 
What's more each such attribute type must have confirmations enabled and configured by selecting a proper 
message template (see below).
. To confirm email identities, identity confirmations must be enabled and configured by selecting a proper 
message template (see below).

The configuration of confirmations (for identities and for each email attribute type) is performed in the 
Server management -> Confirmations configuration tab of the Admin UI. It is rather simplistic as the only 
really variable property is the template to be used.

Note that Unity contains a convenient content initializer which can be enabled in the +unityServer.conf+ to load 
default confirmation configurations on startup:

----
unityServer.core.initializers.3=confirmationsInitializer
----

Later in this section we assume that the confirmations were set up as was described above.

==== When confirmations are sent?

Whenever an email attribute or identity is created or changed manually in Unity interface 
the confirmation message is sent. The sole exception is a change of an attribute by administrator via the Admin UI: 
it is possible to control whether the attribute value should be added as confirmed or not.

Confirmations are also sent whenever a registration request is submitted, with an e-mail attribute or identity which
was collected from the user filling the form. The attributes and identities collected from remote IdPs can be assumed  
be verified (depending on the input translation profile, see below).

The confirmations are not sent when an attribute is updated and some of the values are preserved.
Also already sent confirmations are not repeated during attribute update. E.g. if there is an attribute with 
two email values +a@example.com+ (confirmed) and +b@example.com+ (unconfirmed, with confirmation request already sent),
and a user changes the attribute by adding a new attribute +c@example.com+ only one confirmation request will be sent
(for +c@example.com+), and the confirmed status of +a@example.com+ will be preserved.

Unity also takes care not to resent a confirmation if the same e-mail address was used for both 
identity and attribute (or multiple attributes). Then only a single confirmation is sent and is used to 
confirm all elements. 

It is also possible to reset a confirmation state by the administrator (from Admin UI) 
by setting the unconfirmed state of an attribute value.  

==== Registration forms and confirmations

Registration form including e-mail identities and/or attributes will have the confirmations automatically sent on 
submit. If the request is accepted before the user confirms its e-mail(s) then the confirmations are applied to 
e-mail/attribute of the already created entity. Otherwise are only recorded in the request. Administrator
can always check confirmation status on the request review panel.

It is also possible to use email or identity confirmation status as auto accept condition. This means that the 
auto-accept condition is evaluated not only after request submission, but also after the request is updated 
in confirmation effect. The auto acceptance rules for email attribute and identity (respectively) are as follows:

----
attr["email"].confirmed == true
----

----
idsByTypeObj["email"][0].confirmed == true
----

[[email-encoding]]
==== Special encoding of emails 

When setting an email value from translation profile of via REST API it might be necessary to set the email's metadata.  

To control an attribute or identity confirmation state, the regular e-mail value must be followed with the special 
suffix +[CONFIRMED]+ or +[UNCONFIRMED]+ (case sensitive, without spaces between
the last character of email address). The default value is unconfirmed. 
For instance assuming that the remote IdP provided an attribute +emailAddress+ and we assume that this address
should be treated as already confirmed the following expression will produce a proper value for the +mapAttribute+
action:

----
attr["emailAddress"] + "[CONFIRMED]"
----

To control whether an address is designated as a main (primary) contact address one can use email tag +main+ in 
an email value provided to Unity (via REST or in input profile) as follows:

----
someuser+main@example.com
----

Of course the tag +main+ can be used together with confirmation. Currently no other email tags are used by Unity. 

==== User control of e-mail address

If the email attribute type is set as self modifiable, the user can edit its value on its own. To enable it
also the Home UI must be configured to allow for this.

There is one special rule regarding edit of the  e-mail attribute by an ordinary user: if the attribute has 
at least one confirmed value, then after changing the values also at least one confirmed value must be present.

Currently this rule is hardcoded, but in future we may enable its configuration in attribute type.
   
==== Authentication with e-mail identity

Authentication with e-mail identity can be used in the very same way as authentication with a plain username identity.
Both identity types works out of the box with the password credential.

The only difference is that a user can not authenticate with e-mail identity if it was not confirmed.
 

=== Bulk entity operations

It is possible to invoke or schedule for recurring invocations conditional actions on entities database.
This feature is activated in the Server management -> Bulk processing.

Scheduled actions are executed with a cron-like schedule (see tooltip for help). Actions are configured
in a simple way. the only complicated and key part is rule condition, which must evaluate to true 
to select entity for which action should be invoked. 

Condition is given in MVEL language (see {mveldoc} for details).
The context exposes the following variables:

. +attr+ Map indexed with names of attribute in the '/' group. 
Value of each entry is a single value of the attribute. If the attribute is multi-valued then 
the first value is returned. If the attribute has no value then empty string is returned. 
. +attrs+ Map indexed with attribute names. Value of each entry is a list of the attribute values.
. +idsByType+ Map of identity values indexed by type.
. +idsByTypeObj+ Map of identity values indexed by type. Here values are full objects, what is useful to check
for instance confirmation status of an email. 
. +groups+ List of all groups where entity is a member. 
. +status+ Current status of the entity.
. +credReq+ credential requirement id of the entity.

Example condition selecting all disabled entities:

----
status == 'DISABLED'
----

Another much more complex example: let's select all users who logged in no later then 6 months ago 
(line breaks added for clarity):

----
import java.time.*;
attr contains 'sys:LastAuthentication' && 
LocalDateTime.parse(attr['sys:LastAuthentication']).isBefore(LocalDateTime.now().minusMonths(6))
----

Here we first import Java namespace with time operations. The actual condition first checks 
if the user has logged at all (i.e. has the +sys:LastAuthentication+ attribute) and if so
we parse the last authentication attribute as date and compare it to the current time minus 6 months.  

In case of troubles you can contact mailing list. It is always good to check server logs - detailed 
information on bulk processing execution can be found there.
